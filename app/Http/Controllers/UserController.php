<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Base\CrudController;
use App\PhoneNumber;
use App\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Validator;

class UserController extends CrudController
{
    protected $rules = [
        'first_name' => 'required|min:2',
        'last_name' => 'required|min:2',
        'email' => 'required|email',
        'phone_number' => 'required'
    ];

    protected $model_singular = 'user';
    protected $model_plural = 'users';
    protected $human_plural = 'Mitglieder';
    protected $human_singular = 'Mitglied';

    public function __construct(User $user)
    {
        $this->model = $user;
    }

    protected function getValidator(Request $request, bool $creating = false)
    {
        $v = parent::getValidator($request, $creating);

        if(!$creating)
        {
            $v->sometimes('password', 'required|min:6', function($data) use ($request) {
                return $data->can_login && $request->get('password', '') != '';
            });
        }
        else
        {
            $v->sometimes('password', 'required|min:6|max:32', function($data) {
                return $data->can_login;
            });
        }

        return $v;
    }

    protected function getModelName(Model $model)
    {
        return $model->last_name . ', ' . $model->first_name;
    }

    protected function getModels()
    {
        return User::orderBy('last_name')->get();
    }

    protected function preUpdateActions(Model $model, array $data)
    {
        if($model->can_login && !$data['can_login'])
        {
            $data['password'] = null;
        }
        else if(!$model->can_login && !$data['can_login'])
        {
            $data['password'] = null;
        }
        else
        {
            if(!in_array('password', array_keys($data)) || $data['password'] == '')
            {
                $data['password'] = $model->password;
            }
            else
            {
                $data['password'] = Hash::make($data['password']);
            }
        }

        return $data;
    }

    protected function postUpdateActions(Model $model, Request $request)
    {
        $number = $model->default_phone();
        $number->number = $request->get('phone_number');
        $number->update_normalized_number();
        $number->save();

        $model->vehicles()->sync($request->get('selected_vehicles', []));
    }

    protected function preStoreActions(array $data)
    {
        $data['password'] = Hash::make($data['password']);
        return $data;
    }

    protected function postStoreActions(Model $model, Request $request)
    {
        $number = new PhoneNumber();
        $number->description = 'mobil';
        $number->is_default = true;
        $number->number = $request->get('phone_number');
        $number->update_normalized_number();
        $number->user_id = $model->id;
        $number->save();

        $model->vehicles()->sync($request->get('selected_vehicles', []));
    }

    protected function preDeleteActions(Model $model, Request $request)
    {
        parent::preDeleteActions($model, $request); // TODO: Change the autogenerated stub
    }

    public function editnumbers(Request $request, $user)
    {
        return view('pages.users.editnumbers', ['user' => User::findOrFail($user)]);
    }

    public function updatenumbers(Request $request, $user)
    {
        $user = User::findOrFail($user);

        $desc = $request->get('descriptions');
        $num = $request->get('numbers');
        $def_id = $request->get('default_number');

        foreach($user->numbers()->get() as $number)
        {
            $number->description = $desc[$number->id];
            $number->number = $num[$number->id];
            $number->is_default = $number->id == $def_id;
            $number->update_normalized_number();
            $number->save();
        }

        Session::flash('alert', 'Nummern aktualisiert');
        return redirect()->route('users.numbers.edit', $user->id);
    }

    public function deletenumber(Request $request, $user, $number)
    {
        $number = PhoneNumber::findOrFail($number);
        $user = User::findOrFail($user);

        if($number->is_default)
        {
            Session::flash('alert', 'Kann Hauptnummer nicht lÃ¶schen.');
            Session::flash('alert_class', 'alert-warning');
        }
        else if($user->numbers()->count() < 2)
        {
            Session::flash('alert', 'Benutzer muss mindestens eine Nummer im System haben.');
            Session::flash('alert_class', 'alert-warning');
        }
        else
        {
            Session::flash('alert', 'Nummer gelÃ¶scht.');
            $number->delete();
        }

        return redirect()->route('users.numbers.edit', $user->id);
    }

    public function newnumber(Request $request, $user)
    {
        $number = new PhoneNumber($request->all());
        $number->update_normalized_number();
        $number->user_id = $user;
        $number->save();

        Session::flash('alert', 'Nummer gespeichert');
        return redirect()->route('users.numbers.edit', $user);
    }
}
